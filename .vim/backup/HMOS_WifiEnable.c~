/*
 =======================================================================
 Name        : HMOS_WifiEnable.c
 Company     : Safran Electronics & Defense
 Version     :
 Copyright   : Safran Electronics & Defense
 Description : This source file defines the API service HMOS_WifiEnable
 =======================================================================
 */

/**************************************
 * IMPORTED COMPONENTS
 **************************************/
#include <hmos_cyclops_connectivity.h>
#include <hmos_log.h>
#include <string.h>
#include <hmos.h>

/**************************************
 * LOCAL CONST
 **************************************/
 #define PATH_TO_WRITE "/var/services/wifi/input"

 #define MAX_PATH_SIZE 100
 #define WIFI_FILE_ENABLE ".trigger_enable"
 #define WIFI_FILE_DISABLE ".trigger_disable"

/**************************************
 * GLOBAL VARIABLES
 **************************************/
/* None */

/**************************************
 * LOCAL VARIABLES
 **************************************/
/* None */

/**************************************
 * LOCAL PROTOTYPES
 **************************************/
e_hmos_retcode create_file_wifi(const bool enable);

/* */

/**************************************
 * EXTERNAL FUNCTIONS
 **************************************/

e_hmos_retcode HMOS_WifiEnable (const bool enable)
{
    int ret;
    char mode[20];

    if( HMOS_fetchRunningMode(mode) )
    {
        HMOS_logPrint(HMOS_LOG_CRIT_NOTICE, "%s : Fetching Mode failed", __func__);
        return HMOS_RETCODE_ERROR;
    }

    ret = strcmp(mode, "operational_secured");
    if(ret==0)
    {
        HMOS_logPrint(HMOS_LOG_CRIT_NOTICE, 
                      "%s : Security event : HEATSSECF", __func__);
        return HMOS_RETCODE_ERROR;
    }

    ret = create_file_wifi(enable);
    if ( ret != HMOS_RETCODE_SUCCESS )
    {
        return ret;
    }

    if ( enable )
    {
        HMOS_logPrint(HMOS_LOG_CRIT_NOTICE, "WIFI Enable");
    }
    else
    {
        HMOS_logPrint(HMOS_LOG_CRIT_NOTICE, "WIFI Disable");
    }

    return HMOS_RETCODE_SUCCESS;
}


/**************************************
 * LOCAL FUNCTIONS
 **************************************/
e_hmos_retcode create_file_wifi(const bool enable)
{
    char full_path[MAX_PATH_SIZE];
    mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP; //0660

    /* Concatenate path and file name */
    snprintf(full_path, MAX_PATH_SIZE, "%s/%s", PATH_TO_WRITE,
             (enable ? WIFI_FILE_ENABLE : WIFI_FILE_DISABLE));

    if ( ! access(full_path, F_OK) )
    {
        HMOS_logPrint(HMOS_LOG_CRIT_ERROR,
                      "%s: error: Wifi operation is still running",
                      __func__);
        return HMOS_RETCODE_ERROR;
    }

    /* Create file from path */
    if ( creat(full_path, mode) == -1 )
    {
       HMOS_logPrint(HMOS_LOG_CRIT_ERROR,
                     "%s: error while creating file (full path=%s, errno=%d)",
                     __func__, full_path, errno);
       HMOS_logPrint(HMOS_LOG_CRIT_NOTICE, 
                     "Errno = %d : %s", errno, strerror(errno));

       return HMOS_RETCODE_ERROR;
    }

    HMOS_logPrint(HMOS_LOG_CRIT_NOTICE,
                  "%s: file created \"%s\"", __func__, full_path);

    return HMOS_RETCODE_SUCCESS;
}
