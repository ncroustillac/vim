#! /bin/sh
# This script is called whenever acct-authorized is modified.
# acct-authorized is modified by the following cases :
# - hostapd account authentication state
# - external interface unplug detected

source /usr/services/network/firewall-prj-common

WEB_PORT=3000

# Current state of firewall for authentication
FIREWALLSTATE="/var/services/network/authentstate"

# notification from system and hostapd
HOSTAPDSTATEWIFI="/var/services/acct-authorized/acct-authorized-wifi"
HOSTAPDSTATEETH="/var/services/acct-authorized/acct-authorized-eth"
ETHWATCHERNOTIFYFILE="/var/services/eth-watcher/.eth-disconnected"

#--------------------------------------------------------------------------------
# FUNCTIONS
#--------------------------------------------------------------------------------
f_enable()
{
    if [ "$1" == "wifi" ]; then
        systemctl start dhcprelay-wifi
        ip link set ethext down
    elif [ "$1" == "eth" ]; then
        systemctl start dhcprelay
        systemctl start eth-watcher
        ip link set wlan0 down
    fi

    f_enablewebrules $1

    # Update firewall state
    mkdir -p "$(dirname ${FIREWALLSTATE})"
    echo "$1" > ${FIREWALLSTATE}
    echo "Firewall : added authentication rules"
}

f_disable()
{
    if [ "$1" == "wifi" ]; then
        HANDLE_FORWARD_HTTP_IN=`nft -a list chain filter forward | grep "iifname \"wlan0" | grep "tcp dport 3000" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_FORWARD_HTTP_OUT=`nft -a list chain filter forward | grep "oifname \"wlan0" | grep "tcp sport 3000" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_FILTER_DHCP_IN=`nft -a list chain filter input | grep "iifname \"wlan0" | grep "udp dport 67-68" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_FILTER_DHCP_OUT=`nft -a list chain filter output | grep "oifname \"wlan0" | grep "udp dport 67-68" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_NAT_WEB_IN=`nft -a list chain nat prerouting | grep "daddr ${WLAN0_ADDR}" | grep "tcp dport ${WEBPORT}" | cut -d "#" -f 2 | cut -c 9-10`

        systemctl stop dhcprelay-wifi
        ip link set ethext up
    elif [ "$1" == "eth" ]; then
        HANDLE_FORWARD_HTTP_IN=`nft -a list chain filter forward | grep "iifname \"ethext" | grep "tcp dport 3000" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_FORWARD_HTTP_OUT=`nft -a list chain filter forward | grep "oifname \"ethext" | grep "tcp sport 3000" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_FILTER_DHCP_IN=`nft -a list chain filter input | grep "iifname \"ethext" | grep "udp dport 67-68" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_FILTER_DHCP_OUT=`nft -a list chain filter output | grep "oifname \"ethext" | grep "udp dport 67-68" | cut -d "#" -f 2 | cut -c 9-10`
        HANDLE_NAT_WEB_IN=`nft -a list chain nat prerouting | grep "daddr ${ETHEXT_ADDR}" | grep "tcp dport ${WEBPORT}" | cut -d "#" -f 2 | cut -c 9-10`
        
        systemctl stop dhcprelay
        systemctl stop eth-watcher
        ip link set wlan0 up
    else
        return
    fi

    # TODO REMOVE NAT RULES
    nft delete rule filter forward handle $HANDLE_FORWARD_HTTP_IN
    nft delete rule filter forward handle $HANDLE_FORWARD_HTTP_OUT
    nft delete rule filter input handle $HANDLE_FILTER_DHCP_IN
    nft delete rule filter output handle $HANDLE_FILTER_DHCP_OUT
    nft delete rule nat prerouting handle $HANDLE_FILTER_DHCP_OUT

    # Update firewall state
    mkdir -p "$(dirname ${FIREWALLSTATE})"
    echo "0" > ${FIREWALLSTATE}
    echo "Firewall : removed authentication rules"
}

f_process_if ()
{
    #eval "exec ${FLOCK_FD}>/var/services/acct-authorized.lock"
    #flock -x ${FLOCK_FD}

    local current_state="$(cat ${FIREWALLSTATE} 2>/dev/null || echo "0")"
    local interface_name=$1
    local requested_state=$2

    if [ ${requested_state} -eq 1 ]; then
        # allow only one interface at a time
        if [ "${current_state}" == "0" ]; then
            f_enable ${interface_name}
        fi
    else
        # prevent interfaces from disabling each others
        if [ "${current_state}" ==  "${interface_name}" ]; then
            f_disable ${interface_name}
        fi
    fi

    #flock -u ${FLOCK_FD}
}

#--------------------------------------------------------------------------------
# MAIN
#--------------------------------------------------------------------------------
# check requested actions
case $1 in
    "hostapd-wifi")
        iface="wifi"
        req="$(cat ${HOSTAPDSTATEWIFI})"
        echo "Hostapd notify: wifi state changed to ${req}"
        f_process_if ${iface} ${req}

        # notify that the file has been processed
        echo "0" > ${HOSTAPDSTATEWIFI}
        ;;
    "hostapd-eth")
        iface="eth"
        req="$(cat ${HOSTAPDSTATEETH})"
        echo "Hostapd notify: eth state changed to ${req}"
        f_process_if ${iface} ${req}

        # notify that the file has been processed
        echo "0" > ${HOSTAPDSTATEETH}
        ;;
    "eth-disconnected")
        iface="eth"
        req="0"
        echo "System notify: eth state changed to ${req}"
        
        f_process_if ${iface} ${req}
        rm ${ETHWATCHERNOTIFYFILE}
        ;;
    *)
        ;;
esac
    
