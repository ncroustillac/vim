/*
 =======================================================================
 Name        : hmos_cyclops_installer.h
 Company     : Safran Electronics & Defense
 Version     :
 Copyright   : Safran Electronics & Defense
 Description : This header defines the API of the hmos_cyclops_installer library.
 =======================================================================
 */

#ifndef HMOS_CYCLOPS_INSTALLER_H_
#define HMOS_CYCLOPS_INSTALLER_H_

#include <hmos_def.h>

/**
 * @brief Notifications that HEATS can receive
 */
typedef enum
{
    // RMC
    HMOS_RMC_content_file_rdy,
    HMOS_RMC_device_removed,
    // File Fetcher
    HMOS_fail_GSM_ON,
    HMOS_fail_GSM_OFF,
    HMOS_success_GSM_ON,
    HMOS_success_GSM_OFF,
    HMOS_fail_GSM_GETGND,
    HMOS_success_GSM_GETGND,
    HMOS_fail_GSM_SEND,
    HMOS_success_GSM_SEND,
    HMOS_success_SIGNED,
    HMOS_fail_openVPN_ON,
    HMOS_fail_openVPN_OFF,
    HMOS_fail_FTP_ON,
    HMOS_fail_FTP_OFF,
    HMOS_fail_NTWK,
    // Siggnature Checker
    HMOS_fail_signature_check,
    // Compatibility Checker
    HMOS_fail_compat,
    // Dispatcher
    HMOS_fail_dispatcher,
    HMOS_HEATS_files_rdy,
    // Installer
    HMOS_eMMC_unknown_dest_pt,
    HMOS_eMMC_install_done,
    HMOS_eMMC_install_fail,
    HMOS_switch_PT_fail,
    HMOS_switch_PT_OK,
    HMOS_install_done,
    HMOS_error_notif_to_heats
    HMOS_fail_SAT_SEND,
    HMOS_success_SAT_SEND,
} e_hmos_notif_to_heats;

/**
 * @brief Notifications that HEATS can send
 */
typedef enum
{
    HMOS_ACQ_PWR_transmit_fail,
    HMOS_ACQ_PWR_install_fail,
    HMOS_ACQ_PWR_install_OK,
    HMOS_ACQ_PWR_switch_fail,
    HMOS_ACQ_PWR_switch_OK,
    HMOS_error_notif_from_heats
} e_hmos_notif_from_heats;

/**
 * @brief Install method
 */
typedef enum
{
    HMOS_USB_SD,
    HMOS_GSM
} e_hmos_install_method;

#define FLS_SIZE_NAME 16

/**
 * @brief FLS source to install
 */
typedef struct
{
    char FLS1_name[FLS_SIZE_NAME];
    char FLS2_name[FLS_SIZE_NAME];
    char FLS3_name[FLS_SIZE_NAME];
} st_hmos_source_file;

/**
 * @brief The function verifies the authenticity , integrity and signature of the loads, and proceeds to their installation on the corresponding partition
 *
 * @param[in] TBD
 *
 * @retval HMOS_RETCODE_SUCCESS The function completed successfully.
 * @retval HMOS_RETCODE_ERROR An error occurred.
 */
extern e_hmos_retcode HMOS_installSWTRANFLS ();

/**
 * @brief The service sets the freshly-written partition as backup, and the previously-used partition as FRESH
 *
 * @param[in] TBD
 *
 * @retval HMOS_RETCODE_SUCCESS The function completed successfully.
 * @retval HMOS_RETCODE_ERROR An error occurred.
 */
extern e_hmos_retcode HMOS_cancelSWTRANFLS ();

/**
 * @brief The function verifies the authenticity , integrity and signature of the loads, and proceeds to their installation on the corresponding partition
 *
 * @param[in] e_hmos_install_method Select install source type
 * @param[in] st_hmos_source_file 1 to 3 FLS name to install. If one FLS is not used, set the first character of its name to '\0'
 *
 * @retval HMOS_RETCODE_SUCCESS The function completed successfully.
 * @retval HMOS_RETCODE_ERROR An error occurred.
 */
extern e_hmos_retcode HMOS_installHV3FLS (e_hmos_install_method install_method, const st_hmos_source_file source_file);

/**
 * @brief The service initialise the notification system between HEATS and CYCLOPS
 *
 * @param[in] NONE
 *
 * @retval FILE_DESCRIPTOR The function completed successfully.
 * @retval -1 An error occurred.
 */
extern int HMOS_notif_init ();

/**
 * @brief The service gets the notification sent by CYCLOPS
 *
 * @param[in] file_descriptor The file descriptor return with HMOS_notif_init().
 *
 * @retval NOTIF_TO_HEATS The function completed successfully.
 * @retval HMOS_error An error occurred.
 */
extern e_hmos_notif_to_heats HMOS_get_notif (int file_desciptor);

/**
 * @brief The service send a notification to CYCLOPS
 *
 * @param[in] notif_from_heats Notification message send from HEATS to CYCLOPS
 *
 * @retval HMOS_RETCODE_SUCCESS The function completed successfully.
 * @retval HMOS_RETCODE_ERROR An error occurred.
 */
extern e_hmos_retcode HMOS_write_notif (e_hmos_notif_from_heats notif_from_heats);

#endif /* HMOS_CYCLOPS_INSTALLER_H_ */
